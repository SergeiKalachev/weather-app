{"version":3,"sources":["store/Weather/Weather.model.ts","store/Weather/Weather.reducer.ts","services/http.ts","store/rootReducer.ts","store/store.ts","config.ts","store/Weather/Weather.api.ts","store/Weather/Weather.actions.ts","pages/Weather/Weather.selectors.ts","model/theme.model.ts","pages/Weather/Weather.components.tsx","pages/Weather/Weather.container.tsx","components/Loading.tsx","App.tsx","index.tsx"],"names":["Scale","HttpMethod","initialState","scale","Fahrenheit","pageIndex","pageSize","forecasts","selectedForecast","error","converterFromKelvin","Celsius","temperature","groupSegments","segments","reduce","acc","curr","key","moment","dt_txt","format","group","get","set","Map","constructForecasts","groupedSegments","entries","date","weatherInfo","main","temp","length","push","Date","rootReducer","combineReducers","state","action","type","slice","configureStore","preloadedStore","createStore","composeWithDevTools","applyMiddleware","thunk","CONFIG","API","weather","method","GET","url","getWeatherInfo","fetch","then","response","json","catch","_e","toast","send","changeTemperatureScale","changePageIndex","setError","changeSelectedForecast","getWeatherInfoThunk","dispatch","a","api","cod","message","list","getScale","getPageIndex","getPageSize","getForecasts","getSelectedForecast","getError","getSegmentsMaxTemperature","map","s","sort","b","options","theme","custom","bgGray","boxShadowDark","boxShadow1","lightAqua","blue","orange","card","padding","boxShadow","createMuiTheme","useStyles","makeStyles","arrow","color","palette","primary","cursor","fontSize","secondary","breakpoints","down","transform","arrowLeft","forecast","display","flexDirection","borderRadius","marginBottom","forecast_selected","backgroundColor","forecast__line","margin","forecast__text","fontWeight","marginRight","barchart","alignItems","width","height","barchart__level","ScaleControls","onChange","classes","Card","className","Radio","checked","value","PagingArrows","isLeftArrowVisible","isRightArrowVisible","onLeftArrowClick","onRightArrowClick","ArrowComponent","useMediaQuery","ArrowForwardIosIcon","ArrowRightAltIcon","Box","onClick","cn","temperatureLetter","WeatherForecast","averageTemperature","selected","forecastText","component","toFixed","SegmentBarChart","maxTemperature","converter","converterToFahrenheit","converterToCelsius","style","Math","sign","temperatureScale","justifyContent","containerCard","paddingBottom","minWidth","maxWidth","forecastContainer","marginTop","pagingArrows","right","forecastList","barChartsContainer","Weather","useSelector","shallowEqual","maxSegmentsTemperature","useDispatch","forecastsPage","actions","bindActionCreators","weatherActionCreators","e","target","forecastPage","segment","dt","loading","position","top","bottom","left","textShadow","loading__text","content","animation","Loading","loadingText","configure","app","boxSizing","overflow","background","App","useState","setLoading","useEffect","ThemeProvider","store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.796f26ad.chunk.js","sourcesContent":["export enum Scale {\n  Fahrenheit = 'Fahrenheit',\n  Celsius = 'Celsius'\n}\n\nexport type WeatherSegment = {\n  dt: number;\n  main: {\n    temp: number;\n    temp_min: number;\n    temp_max: number;\n    pressure: number;\n    sea_level: number;\n    grnd_level: number;\n    humidity: number;\n    temp_kf: number;\n  };\n  weather: Array<{\n    id: number;\n    main: string;\n    description: string;\n    icon: string;\n  }>;\n  clouds: {\n    all: number;\n  };\n  wind: {\n    speed: number;\n    deg: number;\n  };\n  sys: {\n    pod: string;\n  };\n  dt_txt: string;\n};\n\nexport type WeatherInfo = {\n  cod: string;\n  message: number;\n  city: {};\n  cnt: number;\n  list: Array<WeatherSegment>;\n};\n\nexport type Forecast = {\n  date: string;\n  [Scale.Celsius]: number;\n  [Scale.Fahrenheit]: number;\n  segments: WeatherSegment[];\n};\n\nexport const GET_WEATHER_INFO = 'GET_WEATHER_INFO';\nexport const CHANGE_TEMPERATURE_SCALE = 'CHANGE_TEMPERATURE_SCALE';\nexport const CHANGE_PAGE_INDEX = 'CHANGE_PAGE_INDEX';\nexport const CHANGE_SELECTED_FORECAST = 'CHANGE_SELECTED_FORECAST';\nexport const SET_ERROR = 'SET_ERROR';\n\ninterface GetWeatherAction {\n  type: typeof GET_WEATHER_INFO;\n  weatherInfo: WeatherSegment[];\n}\n\ninterface ChangeTemperatureScaleAction {\n  type: typeof CHANGE_TEMPERATURE_SCALE;\n  scale: Scale;\n}\n\ninterface ChangePageIndex {\n  type: typeof CHANGE_PAGE_INDEX;\n  pageIndex: number;\n}\n\ninterface ChangeSelectedForecast {\n  type: typeof CHANGE_SELECTED_FORECAST;\n  selectedForecast: Forecast;\n}\n\ninterface SetError {\n  type: typeof SET_ERROR;\n  error: string;\n}\n\nexport type WeatherActionTypes = GetWeatherAction | ChangeTemperatureScaleAction\n  | ChangePageIndex | ChangeSelectedForecast | SetError;\n","// tslint:disable: no-magic-numbers\nimport moment from 'moment';\nimport {\n  Scale, WeatherActionTypes, GET_WEATHER_INFO, CHANGE_TEMPERATURE_SCALE,\n  WeatherSegment, CHANGE_PAGE_INDEX, Forecast, CHANGE_SELECTED_FORECAST, SET_ERROR\n} from './Weather.model';\n\nexport type WeatherState = {\n  scale: Scale;\n  pageIndex: number;\n  pageSize: number;\n  forecasts: Forecast[];\n  selectedForecast: Forecast | null;\n  error: string | null;\n};\n\nconst initialState: WeatherState = {\n  scale: Scale.Fahrenheit,\n  pageIndex: 0,\n  pageSize: 3,\n  forecasts: [],\n  selectedForecast: null,\n  error: null\n};\n\nexport const converterFromKelvin = {\n  [Scale.Celsius]: (temperature: number) => temperature - 273.15,\n  [Scale.Fahrenheit]: (temperature: number) => (temperature - 273.15) * 1.8 + 32\n};\n\nconst groupSegments = (segments: WeatherSegment[]) => {\n  const groupedSegments = segments.reduce((acc, curr) => {\n    const key = moment(curr.dt_txt).format('YYYY MM DD');\n    const group = acc.get(key) || [];\n\n    return acc.set(key, [ ...group, curr ]);\n  }, new Map<string, WeatherSegment[]>());\n\n  return groupedSegments;\n};\n\nconst constructForecasts = (groupedSegments: ReturnType<typeof groupSegments>, scale: Scale): Forecast[] => {\n  const forecasts = [];\n  for (const [ date, weatherInfo ] of groupedSegments.entries()) {\n    const temperature = weatherInfo.reduce((acc, curr) => acc + curr.main.temp, 0) / weatherInfo.length;\n    forecasts.push({\n      date: moment(new Date(date)).format('DD MMM YY'),\n      [Scale.Celsius]: converterFromKelvin[Scale.Celsius](temperature),\n      [Scale.Fahrenheit]: converterFromKelvin[Scale.Fahrenheit](temperature),\n      segments: weatherInfo\n      // TODO: add weather info like sunny in 3p.m, scattered clouds in 6 p.m\n    });\n  }\n\n  return forecasts;\n};\n\nexport const weatherInfoReducer = (state = initialState, action: WeatherActionTypes): WeatherState => {\n  switch (action.type) {\n  case GET_WEATHER_INFO:\n    const forecasts = constructForecasts(groupSegments(action.weatherInfo), state.scale);\n    const selectedForecast = forecasts[0];\n\n    return {\n      ...state,\n      forecasts,\n      selectedForecast\n    };\n  case CHANGE_TEMPERATURE_SCALE:\n    return {\n      ...state,\n      scale: action.scale\n    };\n  case CHANGE_PAGE_INDEX:\n    return {\n      ...state,\n      pageIndex: action.pageIndex,\n      selectedForecast: state.forecasts.slice(action.pageIndex, action.pageIndex + state.pageSize)[0]\n    };\n  case CHANGE_SELECTED_FORECAST:\n    return {\n      ...state,\n      selectedForecast: action.selectedForecast\n    };\n  case SET_ERROR:\n    return {\n      ...state,\n      error: action.error\n    };\n  default:\n    return state;\n  }\n};\n","import { toast } from 'react-toastify';\nimport mockedResponse from '../mocked-response.json';\n\nexport enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE'\n}\n\ntype Options = {\n  url: string;\n  method: HttpMethod;\n};\n\ntype HttpError = {\n  cod: number;\n  message: string;\n};\n\nconst MAX_SUCCESS_CODE = 299;\n\nexport const isError = (resp: any): resp is HttpError => resp.cod > MAX_SUCCESS_CODE;\n\nconst DEV = false;\n\nexport const send = <T>({ url, method }: Options): Promise<T | HttpError> => DEV\n  ? Promise.resolve(mockedResponse)\n  : fetch(url, { method })\n  .then((response) => response.json())\n  .catch((_e) => toast.error(`Http request to ${url} failed`));\n","import { combineReducers } from 'redux';\nimport { weatherInfoReducer } from './Weather/Weather.reducer';\n\nexport const rootReducer = combineReducers({\n  weatherInfo: weatherInfoReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer, AppState } from './rootReducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst configureStore = (preloadedStore?: AppState) => createStore(\n  rootReducer,\n  preloadedStore,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n);\n\nexport default configureStore;\n","import { HttpMethod } from './services/http';\n\nexport const CONFIG = {\n  API: {\n    weather: {\n      method: HttpMethod.GET,\n      url: 'https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40'\n    }\n  }\n};\n","import { send } from '../../services/http';\nimport { CONFIG } from '../../config';\nimport { WeatherInfo } from './Weather.model';\n\nexport const getWeatherInfo = () => send<WeatherInfo>({\n  method: CONFIG.API.weather.method,\n  url: CONFIG.API.weather.url\n});\n","import { Dispatch } from 'redux';\nimport * as api from './Weather.api';\nimport {\n  WeatherActionTypes, Scale, GET_WEATHER_INFO, CHANGE_TEMPERATURE_SCALE,\n  WeatherSegment, CHANGE_PAGE_INDEX, Forecast, CHANGE_SELECTED_FORECAST, SET_ERROR\n} from './Weather.model';\nimport { isError } from '../../services/http';\n\nexport const getWeatherInfo = (weatherInfo: WeatherSegment[]): WeatherActionTypes => ({\n  type: GET_WEATHER_INFO,\n  weatherInfo\n});\n\nexport const changeTemperatureScale = (scale: Scale): WeatherActionTypes => ({\n  type: CHANGE_TEMPERATURE_SCALE,\n  scale\n});\n\nexport const changePageIndex = (pageIndex: number): WeatherActionTypes => ({\n  type: CHANGE_PAGE_INDEX,\n  pageIndex\n});\n\nexport const setError = (error: string): WeatherActionTypes => ({\n  type: SET_ERROR,\n  error\n});\n\nexport const changeSelectedForecast = (selectedForecast: Forecast) => ({\n  type: CHANGE_SELECTED_FORECAST,\n  selectedForecast\n});\n\nexport const getWeatherInfoThunk = () =>\n  async (dispatch: Dispatch) => {\n    try {\n      const response = await api.getWeatherInfo();\n      if (!isError(response)) {\n        dispatch(getWeatherInfo(response.list));\n      } else {\n        dispatch(setError(response.message));\n      }\n    } catch (e) {\n      dispatch(setError('Unknown error happened'));\n    }\n  };\n","import { AppState } from '../../store/rootReducer';\nimport { Forecast } from '../../store/Weather/Weather.model';\n\nconst calcSegmentsMaxTemperature = (forecast: Forecast) => {\n  const segmentsTemperatures = forecast.segments.map((s) => s.main.temp);\n  const segmentsMaxTemperature = segmentsTemperatures.sort((a, b) => b - a)[0];\n\n  return segmentsMaxTemperature;\n};\n\nexport const getScale = ((state: AppState) => state.weatherInfo.scale);\n\nexport const getPageIndex = ((state: AppState) => state.weatherInfo.pageIndex);\n\nexport const getPageSize = ((state: AppState) => state.weatherInfo.pageSize);\n\nexport const getForecasts = ((state: AppState) => state.weatherInfo.forecasts);\n\nexport const getSelectedForecast = ((state: AppState) => state.weatherInfo.selectedForecast);\n\nexport const getError = ((state: AppState) => state.weatherInfo.error);\n\nexport const getSegmentsMaxTemperature = ((state: AppState) =>\n  state.weatherInfo.selectedForecast && calcSegmentsMaxTemperature(state.weatherInfo.selectedForecast));\n","import createMuiTheme, { ThemeOptions, Theme } from '@material-ui/core/styles/createMuiTheme';\n\ndeclare module '@material-ui/core/styles/createMuiTheme' {\n  interface Theme {\n    custom: {\n      [index: string]: any;\n    };\n  }\n\n  interface ThemeOptions {\n    custom: {\n      [index: string]: any;\n    };\n  }\n}\n\nexport function createMyTheme(options: ThemeOptions) {\n  return createMuiTheme(options);\n}\n\nexport type MyTheme = ReturnType<typeof createMyTheme>;\n\nconst boxShadow1 = '0 0 5px rgb(58, 58, 58)';\n\nexport const theme = createMyTheme({\n  custom: {\n    bgGray: 'rgb(192, 192, 192)',\n    boxShadowDark: 'rgb(58, 58, 58)',\n    boxShadow1,\n    lightAqua: '#d9ffff',\n    blue: '#008ec5',\n    orange: '#ff8100',\n    card: {\n      padding: '0 10px',\n      boxShadow: boxShadow1\n    }\n  }\n});\n","// tslint:disable: no-magic-numbers\nimport React, { FC } from 'react';\nimport cn from 'classnames';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport { MyTheme, theme } from '../../model/theme.model';\nimport { Scale } from '../../store/Weather/Weather.model';\nimport { converterFromKelvin } from '../../store/Weather/Weather.reducer';\nimport Radio from '@material-ui/core/Radio';\n\nconst useStyles = makeStyles<MyTheme>((theme) => ({\n  card: theme.custom.card,\n  arrow: {\n    color: theme.palette.primary.main,\n    cursor: 'pointer',\n    fontSize: '90px',\n    '&:hover': {\n      color: theme.palette.secondary.main\n    },\n    [theme.breakpoints.down('xs')]: {\n      fontSize: '80px',\n      transform: 'rotateZ(90deg)'\n    }\n  },\n  arrowLeft: {\n    transform: 'rotateY(180deg)',\n    [theme.breakpoints.down('xs')]: {\n      transform: 'rotateZ(270deg)'\n    }\n  },\n  forecast: {\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: '5px',\n    boxShadow: '0 0 3px rgb(58, 58, 58)',\n    cursor: 'pointer',\n    '&:hover': {\n      boxShadow: '0 0 1px 1px black'\n    },\n    [theme.breakpoints.down('xs')]: {\n      marginBottom: '10px',\n      '&:last-child': {\n        marginBottom: 0\n      }\n    }\n  },\n  forecast_selected: {\n    boxShadow: '0 0 1px 1px black',\n    backgroundColor: theme.custom.lightAqua\n  },\n  forecast__line: {\n    margin: '10px'\n  },\n  forecast__text: {\n    fontWeight: 600,\n    marginRight: '2px'\n  },\n  barchart: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    marginRight: '5px',\n    '&:last-child': {\n      marginRight: 0\n    }\n  },\n  'barchart__level-container': {\n    display: 'flex',\n    alignItems: 'flex-end',\n    width: '45px',\n    height: '100%',\n    [theme.breakpoints.down('xs')]: {\n      width: '33px'\n    }\n  },\n  barchart__level: {\n    width: '100%'\n  }\n}));\n\ntype ScaleControlsProps = {\n  scale: Scale;\n  onChange(event: React.ChangeEvent<HTMLInputElement>): void;\n};\n\nexport const ScaleControls: FC<ScaleControlsProps> = ({ onChange, scale }) => {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.card}>\n      <span>{Scale.Celsius}</span>\n      <Radio\n        checked={scale === Scale.Celsius}\n        onChange={onChange}\n        color=\"primary\"\n        value={Scale.Celsius}\n      />\n      <Radio\n        checked={scale === Scale.Fahrenheit}\n        onChange={onChange}\n        color=\"secondary\"\n        value={Scale.Fahrenheit}\n      />\n      <span>{Scale.Fahrenheit}</span>\n    </Card>\n  );\n};\n\ntype PagingArrowsType = {\n  isLeftArrowVisible: boolean;\n  isRightArrowVisible: boolean;\n  onLeftArrowClick(): void;\n  onRightArrowClick(): void;\n  className?: string;\n};\n\nexport const PagingArrows: FC<PagingArrowsType> = ({\n  isLeftArrowVisible,\n  isRightArrowVisible,\n  onLeftArrowClick,\n  onRightArrowClick,\n  className\n}) => {\n  const ArrowComponent = useMediaQuery<MyTheme>((theme) => theme.breakpoints.down('xs'))\n    ? ArrowForwardIosIcon\n    : ArrowRightAltIcon;\n  const classes = useStyles();\n\n  return (\n    <Box className={className}>\n      <Box>\n        {isLeftArrowVisible && (\n          <ArrowComponent\n            onClick={onLeftArrowClick}\n            className={cn(classes.arrow, classes.arrowLeft)}\n          />\n        )}\n      </Box>\n      <Box>\n        {isRightArrowVisible && (\n          <ArrowComponent\n            onClick={onRightArrowClick}\n            className={classes.arrow}\n          />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\ntype WeatherForecastProps = {\n  date: string;\n  selected: boolean;\n  averageTemperature: number;\n  scale: Scale;\n  onClick(): void;\n};\n\nconst temperatureLetter = {\n  [Scale.Celsius]: 'C',\n  [Scale.Fahrenheit]: 'F'\n};\n\nexport const WeatherForecast: FC<WeatherForecastProps> = ({ date, averageTemperature, scale, selected, onClick }) => {\n  const classes = useStyles();\n\n  return (\n    <Box onClick={onClick} className={cn(classes.forecast, { [classes.forecast_selected]: selected })}>\n      <Box className={classes.forecast__line}>\n        <Box className={classes.forecastText} component=\"span\">\n          Date:\n        </Box>\n        {date}\n      </Box>\n      <Box className={classes.forecast__line}>\n        <Box className={classes.forecast__text} component=\"span\">\n          Temperature:\n        </Box>\n        {averageTemperature.toFixed(2)} {temperatureLetter[scale]}\n      </Box>\n    </Box>\n  );\n};\n\ntype SegmentBarChartProps = {\n  temperature: number;\n  maxTemperature: number;\n  date: string;\n  scale: Scale;\n};\n\nexport const SegmentBarChart: FC<SegmentBarChartProps> = ({ temperature, scale, maxTemperature }) => {\n  const classes = useStyles();\n  const converter = converterFromKelvin[scale];\n  const converterToFahrenheit = converterFromKelvin[Scale.Fahrenheit];\n  const converterToCelsius = converterFromKelvin[Scale.Celsius];\n\n  return (\n    <Box className={classes.barchart}>\n      <Box className={classes['barchart__level-container']}>\n        <Box\n          className={classes.barchart__level}\n          style={{\n            height: `${100 * converterToFahrenheit(temperature) / converterToFahrenheit(maxTemperature)}%`,\n            backgroundColor: Math.sign(converterToCelsius(temperature)) === 1 ? theme.custom.orange : theme.custom.blue\n          }}\n        />\n      </Box>\n      {`${converter(temperature).toFixed()} ${temperatureLetter[scale]}`}\n    </Box>\n  );\n};\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/styles';\nimport cn from 'classnames';\nimport * as weatherActionCreators from '../../store/Weather/Weather.actions';\nimport { Scale } from '../../store/Weather/Weather.model';\nimport { MyTheme } from '../../model/theme.model';\nimport {\n  getPageIndex, getPageSize, getScale, getForecasts,\n  getSelectedForecast, getError, getSegmentsMaxTemperature\n} from './Weather.selectors';\nimport { WeatherForecast, SegmentBarChart, ScaleControls, PagingArrows } from './Weather.components';\n\nconst useStyles = makeStyles<MyTheme>((theme) => ({\n  card: theme.custom.card,\n  error: {\n    padding: '10px'\n  },\n  temperatureScale: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  containerCard: {\n    margin: '10px auto',\n    paddingBottom: '10px',\n    minWidth: '400px',\n    maxWidth: '600px',\n    [theme.breakpoints.down('xs')]: {\n      width: '300px',\n      minWidth: 'auto'\n    }\n  },\n  forecastContainer: {\n    [theme.breakpoints.down('xs')]: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      marginTop: '10px'\n    }\n  },\n  pagingArrows: {\n    width: '300px',\n    margin: 'auto',\n    display: 'flex',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('xs')]: {\n      right: 0,\n      width: 'auto',\n      margin: 0,\n      flexDirection: 'column'\n    }\n  },\n  forecastList: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    [theme.breakpoints.down('xs')]: {\n      flexDirection: 'column'\n    }\n  },\n  barChartsContainer: {\n    margin: 'auto',\n    width: '400px',\n    display: 'flex',\n    justifyContent: 'flex-end',\n    height: '100px',\n    marginTop: '30px',\n    [theme.breakpoints.down('xs')]: {\n      width: '300px'\n    }\n  }\n}));\n\nconst Weather: React.FC = () => {\n  const error = useSelector(getError);\n  const scale = useSelector(getScale);\n  const forecasts = useSelector(getForecasts, shallowEqual);\n  const selectedForecast = useSelector(getSelectedForecast, shallowEqual);\n  const maxSegmentsTemperature = useSelector(getSegmentsMaxTemperature);\n  const pageIndex = useSelector(getPageIndex);\n  const pageSize = useSelector(getPageSize);\n  const dispatch = useDispatch();\n  const forecastsPage = forecasts.slice(pageIndex, pageIndex + pageSize);\n  const isLeftArrowVisible = pageIndex !== 0;\n  const isRightArrowVisible = pageIndex + pageSize < forecasts.length;\n  const actions = bindActionCreators(weatherActionCreators, dispatch);\n\n  const classes = useStyles();\n\n  if (error) {\n    return (\n      <Card className={cn(classes.card, classes.error)}>Error calling the weather api: {error}</Card>\n    );\n  }\n\n  return (\n    <>\n      <Box className={classes.temperatureScale}>\n        <ScaleControls\n          onChange={(e) => actions.changeTemperatureScale(e.target.value as Scale)}\n          scale={scale}\n        />\n      </Box>\n      <Card className={cn(classes.card, classes.containerCard)}>\n        <Box className={classes.forecastContainer}>\n          <PagingArrows\n            isLeftArrowVisible={isLeftArrowVisible}\n            isRightArrowVisible={isRightArrowVisible}\n            onLeftArrowClick={() => actions.changePageIndex(pageIndex - pageSize)}\n            onRightArrowClick={() => actions.changePageIndex(pageIndex + pageSize)}\n            className={classes.pagingArrows}\n          />\n          <Box className={classes.forecastList}>\n            {forecastsPage.map((forecastPage) => (\n              <WeatherForecast\n                selected={!!selectedForecast && selectedForecast.date === forecastPage.date}\n                key={forecastPage.date}\n                scale={scale}\n                date={forecastPage.date}\n                averageTemperature={forecastPage[scale]}\n                onClick={() => actions.changeSelectedForecast(forecastPage)}\n              />\n            ))}\n          </Box>\n        </Box>\n        <Box className={classes.barChartsContainer}>\n          {selectedForecast && selectedForecast.segments.map((segment) => (\n            <SegmentBarChart\n              key={segment.dt}\n              scale={scale}\n              temperature={segment.main.temp}\n              maxTemperature={maxSegmentsTemperature as number}\n              date={segment.dt_txt}\n            />\n          ))}\n        </Box>\n      </Card>\n    </>\n  );\n};\n\nexport default Weather;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport { MyTheme } from '../model/theme.model';\n\ntype Props = {\n  loadingText?: string;\n};\n\nconst useStyles = makeStyles<MyTheme>((theme) => ({\n  loading: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    margin: 'auto',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  '@keyframes dots': {\n    '0%, 20%': {\n      color: 'rgba(0,0,0,0)',\n      textShadow: '.25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0)'\n    },\n    '40%': {\n      color: 'black',\n      textShadow: '.25em 0 0 rgba(0,0,0,0), .5em 0 0 rgba(0,0,0,0)'\n    },\n    '60%': {\n      textShadow: '.25em 0 0 black, .5em 0 0 rgba(0,0,0,0)'\n    },\n    '80%, 100%': {\n      textShadow: '.25em 0 0 black, .5em 0 0 black'\n    }\n  },\n  loading__text: {\n    display: 'inline-block',\n    fontSize: '25px',\n    borderRadius: '3px',\n    backgroundColor: 'white',\n    padding: '16px 20px',\n    boxShadow: theme.custom.boxShadow1,\n    color: 'black',\n    '&:after': {\n      content: '\".\"',\n      animation: '$dots 1s steps(5, end) infinite'\n    }\n  }\n}));\n\nconst Loading: React.FC<Props> = ({ loadingText = 'Loading' }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.loading}>\n      <div className={classes.loading__text}>{loadingText}</div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { toast } from 'react-toastify';\nimport { ThemeProvider } from '@material-ui/styles';\nimport * as weatherActionCreators from './store/Weather/Weather.actions';\nimport Weather from './pages/Weather/Weather.container';\nimport Loading from './components/Loading';\nimport { theme, MyTheme } from './model/theme.model';\nimport { Box, makeStyles } from '@material-ui/core';\n\n// TODO: customize toast\ntoast.configure();\n\nconst useStyles = makeStyles<MyTheme>(() => ({\n  app: {\n    boxSizing: 'border-box',\n    overflow: 'auto',\n    width: '100%',\n    height: '100%',\n    background: theme.custom.bgGray,\n    padding: '10px'\n  }\n}));\n\nconst App: React.FC = () => {\n  const [ loading, setLoading ] = useState(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const actions = bindActionCreators(weatherActionCreators, dispatch);\n\n    setLoading(true);\n\n    actions.getWeatherInfoThunk()\n    .then(() => setLoading(false));\n  }, [ dispatch ]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box className={classes.app}>\n        {loading ? <Loading /> : <Weather />}\n      </Box>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/store';\nimport './index.scss';\nimport App from './App';\n\nconst store = configureStore();\n\nReactDOM.render(\n  (\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}